"""
# Урок 16

Генерация адаптеров по интерфейсу

**Цель** В рамках данного ДЗ Вы научитесь генерировать адаптеры для интерфейсов, полученных при применении
принципа DIP. ДЗ демонстрирует применение метапрограммирования для решения рутинных задач, а также
возможности Reflection и компиляции "на лету" современных языков программирования.

Если задание выполняется на C++, то задание заключается в написании препроцессора, который ищет
абстрактные классы и по ним генерирует код адаптера, который включается в состав проекта.
Для удобства такой препроцессор стоит запускать на этапе, предшествующем компиляции в процессе сборки,
а также стоит подумать об удалении всех сгенерированных файлов при выполнении команды clear.

Предположим, что у нас есть интерфейс
```
interface Tank.Operations.IMovable
{
  Vector getPosition();
  Vector setPosition(Vector newValue);
  Vector getVelocity();
}
```

1. Необходимо по нему сгенерировать следующий класс:
    ```
    class AutoGenerated.MovableAdapter:  Tank.Operations.IMovable
    {
      UObject obj;
      public  MovableAdapter(UObject obj)
      {
         this.obj = obj;
      }

      public Vector getPosition()
      {
         return IoC.Resolve("Tank.Operations.IMovable:position.get", obj);
      }

      public Vector getVelocity()
      {
         return IoC.Resolve("Tank.Operations.IMovable:velocity.get", obj);
      }

      public Vector setPosition(Vector newValue)
      {
         return IoC.Resolve("Tank.Operations.IMovable:position.set", obj, newValue);
      }
    }
    ```

    так, чтобы можно было создавать экземпляры этого класса.

2. Экземпляры генерируемых оберток для объекта obj можно создавать следующей строкой:
    ```
    var adapter = IoC.Resolve("Adapter", typeof(IMovable), obj);
    ```
3. Необязательная задача на подумать: если интерфейсе потребуются какие-либо методы, например, как
    ```
     interface Tank.Operations.IMovable
    {
      Vector getPosition();
      Vector setPosition(Vector newValue);
      Vector getVelocity();

      void finish();
    }
    ```
    Придумать реализацию адаптера для подобных методов.

**Критерии оценки:**

1. Задание сдано на проверку - 2 балла

2. Реализован генератор адаптеров - 5 баллов

3. Реализованы тесты на генератор адаптеров - 3 балла

4. Определена стратегия для IoC из п. 2 задания - 5 баллов

5. Обработан случай из п. 3 задания - 5 баллов

минимальное количество баллов, которое необходимо набрать - 12 баллов

"""